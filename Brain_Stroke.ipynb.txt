{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "k_fwI6MCM8me"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=pd.read_csv(\"/content/brain_stroke .csv\")\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "dI35kQYiPxOw",
        "outputId": "ff1f71ac-1f8e-4fac-eebc-d8371991a612"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      gender   age  hypertension  heart_disease ever_married      work_type  \\\n",
              "0       Male  67.0             0              1          Yes        Private   \n",
              "1       Male  80.0             0              1          Yes        Private   \n",
              "2     Female  49.0             0              0          Yes        Private   \n",
              "3     Female  79.0             1              0          Yes  Self-employed   \n",
              "4       Male  81.0             0              0          Yes        Private   \n",
              "...      ...   ...           ...            ...          ...            ...   \n",
              "4976    Male  41.0             0              0           No        Private   \n",
              "4977    Male  40.0             0              0          Yes        Private   \n",
              "4978  Female  45.0             1              0          Yes       Govt_job   \n",
              "4979    Male  40.0             0              0          Yes        Private   \n",
              "4980  Female  80.0             1              0          Yes        Private   \n",
              "\n",
              "     Residence_type  avg_glucose_level   bmi   smoking_status  stroke  \n",
              "0             Urban             228.69  36.6  formerly smoked       1  \n",
              "1             Rural             105.92  32.5     never smoked       1  \n",
              "2             Urban             171.23  34.4           smokes       1  \n",
              "3             Rural             174.12  24.0     never smoked       1  \n",
              "4             Urban             186.21  29.0  formerly smoked       1  \n",
              "...             ...                ...   ...              ...     ...  \n",
              "4976          Rural              70.15  29.8  formerly smoked       0  \n",
              "4977          Urban             191.15  31.1           smokes       0  \n",
              "4978          Rural              95.02  31.8           smokes       0  \n",
              "4979          Rural              83.94  30.0           smokes       0  \n",
              "4980          Urban              83.75  29.1     never smoked       0  \n",
              "\n",
              "[4981 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-34ecc71a-acbc-4751-80ff-c73dafd4c161\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>ever_married</th>\n",
              "      <th>work_type</th>\n",
              "      <th>Residence_type</th>\n",
              "      <th>avg_glucose_level</th>\n",
              "      <th>bmi</th>\n",
              "      <th>smoking_status</th>\n",
              "      <th>stroke</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Male</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>228.69</td>\n",
              "      <td>36.6</td>\n",
              "      <td>formerly smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Male</td>\n",
              "      <td>80.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Rural</td>\n",
              "      <td>105.92</td>\n",
              "      <td>32.5</td>\n",
              "      <td>never smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Female</td>\n",
              "      <td>49.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>171.23</td>\n",
              "      <td>34.4</td>\n",
              "      <td>smokes</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Female</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>Rural</td>\n",
              "      <td>174.12</td>\n",
              "      <td>24.0</td>\n",
              "      <td>never smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Male</td>\n",
              "      <td>81.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>186.21</td>\n",
              "      <td>29.0</td>\n",
              "      <td>formerly smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4976</th>\n",
              "      <td>Male</td>\n",
              "      <td>41.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>Private</td>\n",
              "      <td>Rural</td>\n",
              "      <td>70.15</td>\n",
              "      <td>29.8</td>\n",
              "      <td>formerly smoked</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4977</th>\n",
              "      <td>Male</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>191.15</td>\n",
              "      <td>31.1</td>\n",
              "      <td>smokes</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4978</th>\n",
              "      <td>Female</td>\n",
              "      <td>45.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Govt_job</td>\n",
              "      <td>Rural</td>\n",
              "      <td>95.02</td>\n",
              "      <td>31.8</td>\n",
              "      <td>smokes</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4979</th>\n",
              "      <td>Male</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Rural</td>\n",
              "      <td>83.94</td>\n",
              "      <td>30.0</td>\n",
              "      <td>smokes</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4980</th>\n",
              "      <td>Female</td>\n",
              "      <td>80.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>83.75</td>\n",
              "      <td>29.1</td>\n",
              "      <td>never smoked</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4981 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34ecc71a-acbc-4751-80ff-c73dafd4c161')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-34ecc71a-acbc-4751-80ff-c73dafd4c161 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-34ecc71a-acbc-4751-80ff-c73dafd4c161');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6c81c5dd-5573-4573-a8e4-9b7b092f8366\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6c81c5dd-5573-4573-a8e4-9b7b092f8366')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6c81c5dd-5573-4573-a8e4-9b7b092f8366 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3137868e-6e12-4089-ba71-c56fad192f29\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3137868e-6e12-4089-ba71-c56fad192f29 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 4981,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.6627550736985,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          70.0,\n          36.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Self-employed\",\n          \"children\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rural\",\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.07537280843004,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3895,\n        \"samples\": [\n          106.69,\n          95.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.79046362629275,\n        \"min\": 14.0,\n        \"max\": 48.9,\n        \"num_unique_values\": 342,\n        \"samples\": [\n          17.5,\n          20.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gkIy0R-QPziG",
        "outputId": "b14f67b1-8192-439b-a4b6-e71b61a113c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "gender               0\n",
              "age                  0\n",
              "hypertension         0\n",
              "heart_disease        0\n",
              "ever_married         0\n",
              "work_type            0\n",
              "Residence_type       0\n",
              "avg_glucose_level    0\n",
              "bmi                  0\n",
              "smoking_status       0\n",
              "stroke               0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"work_type\"].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Fj7uFbWP20j",
        "outputId": "d56db00c-7ef7-4249-f591-b8af5da20e6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "work_type\n",
              "Private          2860\n",
              "Self-employed     804\n",
              "children          673\n",
              "Govt_job          644\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "l1=LabelEncoder()"
      ],
      "metadata": {
        "id": "cnxjF-ydP6Nz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"gender\"]=l1.fit_transform(data[\"gender\"])\n",
        "data[\"ever_married\"]=l1.fit_transform(data[\"ever_married\"])\n",
        "data[\"work_type\"]=l1.fit_transform(data[\"work_type\"])\n",
        "data[\"Residence_type\"]=l1.fit_transform(data[\"Residence_type\"])\n",
        "data[\"smoking_status\"]=l1.fit_transform(data[\"smoking_status\"])\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "TA1OwhXfP9j3",
        "outputId": "79bfda43-24da-4a48-863f-db93bc199bb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      gender   age  hypertension  heart_disease  ever_married  work_type  \\\n",
              "0          1  67.0             0              1             1          1   \n",
              "1          1  80.0             0              1             1          1   \n",
              "2          0  49.0             0              0             1          1   \n",
              "3          0  79.0             1              0             1          2   \n",
              "4          1  81.0             0              0             1          1   \n",
              "...      ...   ...           ...            ...           ...        ...   \n",
              "4976       1  41.0             0              0             0          1   \n",
              "4977       1  40.0             0              0             1          1   \n",
              "4978       0  45.0             1              0             1          0   \n",
              "4979       1  40.0             0              0             1          1   \n",
              "4980       0  80.0             1              0             1          1   \n",
              "\n",
              "      Residence_type  avg_glucose_level   bmi  smoking_status  stroke  \n",
              "0                  1             228.69  36.6               1       1  \n",
              "1                  0             105.92  32.5               2       1  \n",
              "2                  1             171.23  34.4               3       1  \n",
              "3                  0             174.12  24.0               2       1  \n",
              "4                  1             186.21  29.0               1       1  \n",
              "...              ...                ...   ...             ...     ...  \n",
              "4976               0              70.15  29.8               1       0  \n",
              "4977               1             191.15  31.1               3       0  \n",
              "4978               0              95.02  31.8               3       0  \n",
              "4979               0              83.94  30.0               3       0  \n",
              "4980               1              83.75  29.1               2       0  \n",
              "\n",
              "[4981 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9a0f2540-a361-4f27-929d-0f804ed8a08f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>ever_married</th>\n",
              "      <th>work_type</th>\n",
              "      <th>Residence_type</th>\n",
              "      <th>avg_glucose_level</th>\n",
              "      <th>bmi</th>\n",
              "      <th>smoking_status</th>\n",
              "      <th>stroke</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>228.69</td>\n",
              "      <td>36.6</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>80.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>105.92</td>\n",
              "      <td>32.5</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>171.23</td>\n",
              "      <td>34.4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>174.12</td>\n",
              "      <td>24.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>81.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>186.21</td>\n",
              "      <td>29.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4976</th>\n",
              "      <td>1</td>\n",
              "      <td>41.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>70.15</td>\n",
              "      <td>29.8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4977</th>\n",
              "      <td>1</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>191.15</td>\n",
              "      <td>31.1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4978</th>\n",
              "      <td>0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>95.02</td>\n",
              "      <td>31.8</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4979</th>\n",
              "      <td>1</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>83.94</td>\n",
              "      <td>30.0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4980</th>\n",
              "      <td>0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>83.75</td>\n",
              "      <td>29.1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4981 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a0f2540-a361-4f27-929d-0f804ed8a08f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9a0f2540-a361-4f27-929d-0f804ed8a08f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9a0f2540-a361-4f27-929d-0f804ed8a08f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e42c61be-fac2-4ac5-a262-1e7b8dcea96a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e42c61be-fac2-4ac5-a262-1e7b8dcea96a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e42c61be-fac2-4ac5-a262-1e7b8dcea96a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c42e9627-506a-4b3c-943a-b143abd5cfed\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c42e9627-506a-4b3c-943a-b143abd5cfed button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 4981,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.6627550736985,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          70.0,\n          36.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.07537280843004,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3895,\n        \"samples\": [\n          106.69,\n          95.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.79046362629275,\n        \"min\": 14.0,\n        \"max\": 48.9,\n        \"num_unique_values\": 342,\n        \"samples\": [\n          17.5,\n          20.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "v8e1TrY-QAOT",
        "outputId": "ca2f626d-c79a-4bf3-f6b0-fc43c7eb6eb9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     gender       age  hypertension  heart_disease  \\\n",
              "gender             1.000000 -0.026538      0.021485       0.086476   \n",
              "age               -0.026538  1.000000      0.278120       0.264852   \n",
              "hypertension       0.021485  0.278120      1.000000       0.111974   \n",
              "heart_disease      0.086476  0.264852      0.111974       1.000000   \n",
              "ever_married      -0.028971  0.677137      0.164534       0.114765   \n",
              "work_type          0.065784 -0.415935     -0.061618      -0.036943   \n",
              "Residence_type    -0.004301  0.017155     -0.004755       0.002125   \n",
              "avg_glucose_level  0.055796  0.236763      0.170028       0.166847   \n",
              "bmi               -0.012093  0.373703      0.158762       0.060926   \n",
              "smoking_status    -0.062666  0.265623      0.110045       0.048093   \n",
              "stroke             0.008870  0.246478      0.131965       0.134610   \n",
              "\n",
              "                   ever_married  work_type  Residence_type  avg_glucose_level  \\\n",
              "gender                -0.028971   0.065784       -0.004301           0.055796   \n",
              "age                    0.677137  -0.415935        0.017155           0.236763   \n",
              "hypertension           0.164534  -0.061618       -0.004755           0.170028   \n",
              "heart_disease          0.114765  -0.036943        0.002125           0.166847   \n",
              "ever_married           1.000000  -0.406439        0.008191           0.150724   \n",
              "work_type             -0.406439   1.000000       -0.003524          -0.059658   \n",
              "Residence_type         0.008191  -0.003524        1.000000           0.001346   \n",
              "avg_glucose_level      0.150724  -0.059658        0.001346           1.000000   \n",
              "bmi                    0.371690  -0.382418        0.013185           0.186348   \n",
              "smoking_status         0.262384  -0.356738        0.010209           0.064089   \n",
              "stroke                 0.108398  -0.041835        0.016494           0.133227   \n",
              "\n",
              "                        bmi  smoking_status    stroke  \n",
              "gender            -0.012093       -0.062666  0.008870  \n",
              "age                0.373703        0.265623  0.246478  \n",
              "hypertension       0.158762        0.110045  0.131965  \n",
              "heart_disease      0.060926        0.048093  0.134610  \n",
              "ever_married       0.371690        0.262384  0.108398  \n",
              "work_type         -0.382418       -0.356738 -0.041835  \n",
              "Residence_type     0.013185        0.010209  0.016494  \n",
              "avg_glucose_level  0.186348        0.064089  0.133227  \n",
              "bmi                1.000000        0.243111  0.056926  \n",
              "smoking_status     0.243111        1.000000  0.027463  \n",
              "stroke             0.056926        0.027463  1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2f229fdc-8709-45cb-8b06-6abd799fe85b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>ever_married</th>\n",
              "      <th>work_type</th>\n",
              "      <th>Residence_type</th>\n",
              "      <th>avg_glucose_level</th>\n",
              "      <th>bmi</th>\n",
              "      <th>smoking_status</th>\n",
              "      <th>stroke</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.026538</td>\n",
              "      <td>0.021485</td>\n",
              "      <td>0.086476</td>\n",
              "      <td>-0.028971</td>\n",
              "      <td>0.065784</td>\n",
              "      <td>-0.004301</td>\n",
              "      <td>0.055796</td>\n",
              "      <td>-0.012093</td>\n",
              "      <td>-0.062666</td>\n",
              "      <td>0.008870</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>-0.026538</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.278120</td>\n",
              "      <td>0.264852</td>\n",
              "      <td>0.677137</td>\n",
              "      <td>-0.415935</td>\n",
              "      <td>0.017155</td>\n",
              "      <td>0.236763</td>\n",
              "      <td>0.373703</td>\n",
              "      <td>0.265623</td>\n",
              "      <td>0.246478</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hypertension</th>\n",
              "      <td>0.021485</td>\n",
              "      <td>0.278120</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.111974</td>\n",
              "      <td>0.164534</td>\n",
              "      <td>-0.061618</td>\n",
              "      <td>-0.004755</td>\n",
              "      <td>0.170028</td>\n",
              "      <td>0.158762</td>\n",
              "      <td>0.110045</td>\n",
              "      <td>0.131965</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>heart_disease</th>\n",
              "      <td>0.086476</td>\n",
              "      <td>0.264852</td>\n",
              "      <td>0.111974</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.114765</td>\n",
              "      <td>-0.036943</td>\n",
              "      <td>0.002125</td>\n",
              "      <td>0.166847</td>\n",
              "      <td>0.060926</td>\n",
              "      <td>0.048093</td>\n",
              "      <td>0.134610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ever_married</th>\n",
              "      <td>-0.028971</td>\n",
              "      <td>0.677137</td>\n",
              "      <td>0.164534</td>\n",
              "      <td>0.114765</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.406439</td>\n",
              "      <td>0.008191</td>\n",
              "      <td>0.150724</td>\n",
              "      <td>0.371690</td>\n",
              "      <td>0.262384</td>\n",
              "      <td>0.108398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>work_type</th>\n",
              "      <td>0.065784</td>\n",
              "      <td>-0.415935</td>\n",
              "      <td>-0.061618</td>\n",
              "      <td>-0.036943</td>\n",
              "      <td>-0.406439</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.003524</td>\n",
              "      <td>-0.059658</td>\n",
              "      <td>-0.382418</td>\n",
              "      <td>-0.356738</td>\n",
              "      <td>-0.041835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residence_type</th>\n",
              "      <td>-0.004301</td>\n",
              "      <td>0.017155</td>\n",
              "      <td>-0.004755</td>\n",
              "      <td>0.002125</td>\n",
              "      <td>0.008191</td>\n",
              "      <td>-0.003524</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.001346</td>\n",
              "      <td>0.013185</td>\n",
              "      <td>0.010209</td>\n",
              "      <td>0.016494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>avg_glucose_level</th>\n",
              "      <td>0.055796</td>\n",
              "      <td>0.236763</td>\n",
              "      <td>0.170028</td>\n",
              "      <td>0.166847</td>\n",
              "      <td>0.150724</td>\n",
              "      <td>-0.059658</td>\n",
              "      <td>0.001346</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.186348</td>\n",
              "      <td>0.064089</td>\n",
              "      <td>0.133227</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>-0.012093</td>\n",
              "      <td>0.373703</td>\n",
              "      <td>0.158762</td>\n",
              "      <td>0.060926</td>\n",
              "      <td>0.371690</td>\n",
              "      <td>-0.382418</td>\n",
              "      <td>0.013185</td>\n",
              "      <td>0.186348</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.243111</td>\n",
              "      <td>0.056926</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoking_status</th>\n",
              "      <td>-0.062666</td>\n",
              "      <td>0.265623</td>\n",
              "      <td>0.110045</td>\n",
              "      <td>0.048093</td>\n",
              "      <td>0.262384</td>\n",
              "      <td>-0.356738</td>\n",
              "      <td>0.010209</td>\n",
              "      <td>0.064089</td>\n",
              "      <td>0.243111</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.027463</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>stroke</th>\n",
              "      <td>0.008870</td>\n",
              "      <td>0.246478</td>\n",
              "      <td>0.131965</td>\n",
              "      <td>0.134610</td>\n",
              "      <td>0.108398</td>\n",
              "      <td>-0.041835</td>\n",
              "      <td>0.016494</td>\n",
              "      <td>0.133227</td>\n",
              "      <td>0.056926</td>\n",
              "      <td>0.027463</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f229fdc-8709-45cb-8b06-6abd799fe85b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2f229fdc-8709-45cb-8b06-6abd799fe85b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2f229fdc-8709-45cb-8b06-6abd799fe85b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3921b3cb-92cb-4686-a7e6-62b12d1922b7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3921b3cb-92cb-4686-a7e6-62b12d1922b7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3921b3cb-92cb-4686-a7e6-62b12d1922b7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3017159322041958,\n        \"min\": -0.06266632929227804,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.06578446220211011,\n          1.0,\n          -0.06266632929227804\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3651445280321965,\n        \"min\": -0.4159352783638016,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.4159352783638016,\n          -0.026538431932725523,\n          0.26562273719973717\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2848451502065874,\n        \"min\": -0.06161817001643447,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.06161817001643447,\n          0.021484762440858556,\n          0.11004545336073718\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28454908687717384,\n        \"min\": -0.036942544351896395,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.036942544351896395,\n          0.08647553058646525,\n          0.04809251965737241\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3705212231977506,\n        \"min\": -0.40643862487940063,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.40643862487940063,\n          -0.02897114685242326,\n          0.2623835487146261\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3977500998407909,\n        \"min\": -0.4159352783638016,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          1.0,\n          0.06578446220211011,\n          -0.3567379427141087\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29992858466045486,\n        \"min\": -0.004755025893644352,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.0035239940359880397,\n          -0.004301164968137069,\n          0.010208611716401236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2820926608197287,\n        \"min\": -0.05965750356109449,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.05965750356109449,\n          0.055795943180245604,\n          0.06408867539225864\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3407004888508969,\n        \"min\": -0.3824178973152682,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.3824178973152682,\n          -0.01209292432088784,\n          0.24311063128244695\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3336111153970771,\n        \"min\": -0.3567379427141087,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.3567379427141087,\n          -0.06266632929227804,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28807882331161533,\n        \"min\": -0.041834577008885904,\n        \"max\": 1.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.041834577008885904,\n          0.008869873027513879,\n          0.02746319295788284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "cmap = sns.diverging_palette(230, 20, as_cmap=True)\n",
        "sns.heatmap(data=data.corr(), cmap=cmap,annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "Kl4LRLSJQD5y",
        "outputId": "cdf859fb-f8cd-4fe6-fc00-1bc3a17aab63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#histo graph\n",
        "sns.histplot(data=data.corr())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "Vgb1srRYQJk4",
        "outputId": "4b4138ee-26d7-4735-e985-2e4b4b20b3d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Count'>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1)Bell Curve Histogram\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "from scipy.stats import norm\n",
        "import numpy as np\n",
        "plt.hist(data[\"age\"], bins=20, rwidth=0.8, density=True)\n",
        "plt.xlabel('age')\n",
        "plt.ylabel('Count')\n",
        "rng = np.arange(data[\"age\"].min(), data[\"age\"].max(), 0.1)\n",
        "plt.plot(rng, norm.pdf(rng,data[\"age\"].mean(),data[\"age\"].std()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "hXwrKsU8QPII",
        "outputId": "7ee334b1-053f-4218-81bc-cd2408f1c8d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f72a2db6f80>]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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RlhYGODZc7V9+3a2b99OtWrVfPIYhuF9PnbsWH799Vfsdjt16tRh/vz5/Oc//ynKH4eIiIgECdNLFEDfvn3p27dvgfNWrlx50rT27dvTvn37U67PYrEwZswYxowZU+D8Bx54gAceeOC0mbp160a3bt1OO0ZERERKLtMvtikiIiISjFSiRERERPygEiUiIiLiB5UoERERET+oRImIiIj4QSVKRERExA8qUSIiIiJ+UIkSERER8YNKlIiIiIgfVKJERERE/KASJSIiIuIHlSgRERERP6hEiYiIiPhBJUpERETEDypRIiIiIn5QiRIRERHxg0qUiIiIiB9UokRERET8oBIlIiIi4geVKBERERE/qESJiIiI+EElSkRERMQPKlEiIiIiflCJEhEREfGDSpSIiIiIH1SiRERERPygEiUiIiLiB5UoERERET+oRImIiIj4QSVKRERExA8qUSIiIiJ+UIkSERER8YNKlIiIiIgfVKJERERE/KASJSIiIuIHlSgRERERP6hEiYiIiPghIErUtGnTiImJISwsjNjYWNasWXPa8QsWLKBOnTqEhYXRoEEDli5d6jPfMAxGjhxJ5cqVKVWqFPHx8Wzbts1nzKFDh7j//vsJDw+nfPny9OjRg6NHj/qM+f7777nuuusICwujevXqTJgwoXA+sIiIiAQ900vU/PnzSUpKYtSoUaxbt46rrrqKhIQE9u/fX+D4VatW0alTJ3r06MH69etJTEwkMTGRjRs3esdMmDCBl156iZSUFFavXk2ZMmVISEjgxIkT3jH3338/P/74I6mpqXz00Ud88cUX9OrVyzs/Ozub1q1bU7NmTTIyMpg4cSKjR49m+vTpRffDEBERkaBheomaPHkyPXv2pHv37tSrV4+UlBRKly7NrFmzChz/4osv0qZNGwYNGkTdunUZO3YsTZo0YerUqYBnL9SUKVMYPnw4d955Jw0bNuStt95i7969LFq0CIDNmzezbNkyZsyYQWxsLC1btuTll19m3rx57N27F4C3336bvLw8Zs2axZVXXknHjh3p168fkydPviA/FxEREQlsdjPfPC8vj4yMDIYNG+adZrVaiY+PJz09vcBl0tPTSUpK8pmWkJDgLUg7duwgMzOT+Ph47/yIiAhiY2NJT0+nY8eOpKenU758eZo1a+YdEx8fj9VqZfXq1dx1112kp6dz/fXXExIS4vM+48eP548//qBChQonZcvNzSU3N9f7+siRI4Bnr1ZRceceK5T1FJSxqNYdjJmLct3K7EuZi369RbnuwlpvUa47GH8eynzmdRemv9dvGMZpx5laog4ePIjL5SIqKspnelRUFFu2bClwmczMzALHZ2Zmeuf/Pe10YypVquQz3263c9FFF/mMqVWr1knr+HteQSUqOTmZp59++qTp1atXL/CzBJKIKcG37mDMXJTrVuYLs25lDv51K/OFWXcwZv7//vzzTyIiIk4539QSVdwMGzbMZy+Z2+3m0KFDVKxYEYvFUmjvk52dTfXq1dm9ezfh4eGFtl4pWtpuwUnbLThpuwWnQNluhmHw559/UqVKldOOM7VERUZGYrPZyMrK8pmelZVFdHR0gctER0efdvzf/83KyqJy5co+Yxo1auQd8/8PXHc6nRw6dMhnPQW9z7/f4/8LDQ0lNDTUZ1r58uULHFsYwsPD9cshCGm7BSdtt+Ck7RacAmG7nW4P1N9MPbA8JCSEpk2bkpaW5p3mdrtJS0sjLi6uwGXi4uJ8xgOkpqZ6x9eqVYvo6GifMdnZ2axevdo7Ji4ujsOHD5ORkeEds2LFCtxuN7Gxsd4xX3zxBfn5+T7vc8UVVxT4VZ6IiIiUMIbJ5s2bZ4SGhhpvvPGGsWnTJqNXr15G+fLljczMTMMwDKNLly7G0KFDveO//vprw263G88//7yxefNmY9SoUYbD4TB++OEH75hx48YZ5cuXNz744APj+++/N+68806jVq1axvHjx71j2rRpYzRu3NhYvXq18dVXXxm1a9c2OnXq5J1/+PBhIyoqyujSpYuxceNGY968eUbp0qWN11577QL8VE7vyJEjBmAcOXLE7ChyDrTdgpO2W3DSdgtOwbbdTC9RhmEYL7/8slGjRg0jJCTEaN68ufHNN99457Vq1cro1q2bz/h3333XuPzyy42QkBDjyiuvNJYsWeIz3+12GyNGjDCioqKM0NBQ4+abbza2bt3qM+b33383OnXqZJQtW9YIDw83unfvbvz5558+Y7777jujZcuWRmhoqFG1alVj3LhxhfvB/XTixAlj1KhRxokTJ8yOIudA2y04absFJ2234BRs281iGGc4f09ERERETmL6xTZFREREgpFKlIiIiIgfVKJERERE/KASJSIiIuIHlaggM23aNGJiYggLCyM2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4cP57bffCAsLA2DGjBn07NmT9evX06hRI5555hm+/PJLPvnkE+86fvvtN6pXr87WrVu5/PLLzfooIlIEtCdKROQv27Zto1OnTlxyySWEh4cTExMDwK5du9i6dSsNGzb0FiiA5s2b+yz/3Xff8dlnn1G2bFnvo06dOgA+XwuKSPFgNzuAiEiguP3226lZsyavv/46VapUwe12U79+ffLy8s5q+aNHj3L77bczfvz4k+ZVrly5sOOKiMlUokREgN9//52tW7fy+uuvc9111wHw1VdfeedfccUVzJkzh9zcXEJDQwH49ttvfdbRpEkT/ve//xETE4Pdrl+vIsWdvs4TEQEqVKhAxYoVmT59Otu3b2fFihUkJSV5599333243W569erF5s2b+eSTT3j++ecBsFgsAPTp04dDhw7RqVMnvv32W37++Wc++eQTunfvjsvlMuVziUjRUYkSEQGsVivz5s0jIyOD+vXrM3DgQCZOnOidHx4ezocffsiGDRto1KgRTz31FCNHjgTwHidVpUoVvv76a1wuF61bt6ZBgwYMGDCA8uXLY7Xq161IcaOz80RE/PT222/TvXt3jhw5QqlSpcyOIyIXmL60FxE5S2+99RaXXHIJVatW5bvvvmPIkCHce++9KlAiJZRKlIjIWcrMzGTkyJFkZmZSuXJl2rdvz7PPPmt2LBExib7OExEREfGDjnQUERER8YNKlIiIiIgfVKJERERE/KASJSIiIuIHlSgRERERP6hEiYiIiPhBJUpERETEDypRIiIiIn74P3LQ/8qntkWrAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=data.iloc[:,:-1].values\n",
        "y=data.iloc[:,-1].values"
      ],
      "metadata": {
        "id": "aZ5sSE9_QSWS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#imbalancing\n",
        "from imblearn.over_sampling import SMOTE\n",
        "s1=SMOTE()\n",
        "x_data,y_data=s1.fit_resample(x,y)"
      ],
      "metadata": {
        "id": "afRQ6bOuQVmV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test=train_test_split(x_data,y_data,test_size=0.2,random_state=11)"
      ],
      "metadata": {
        "id": "vFopkbB7QcEo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "sc=StandardScaler()\n",
        "x_train=sc.fit_transform(x_train)\n",
        "x_test=sc.fit_transform(x_test)"
      ],
      "metadata": {
        "id": "WAoiUzTtQV7s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "print('Counter',Counter(y_data))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mP4WG2aoQgAx",
        "outputId": "ee513301-10d1-4418-9f72-b760483f4579"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter Counter({1: 4733, 0: 4733})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "l1=LogisticRegression()\n",
        "l1.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "efUdPfBpQigV",
        "outputId": "c213b97e-9511-45d4-9c94-72cfa676f4b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred=l1.predict(x_test)"
      ],
      "metadata": {
        "id": "FCHotk6ZQnKx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "ac=accuracy_score(y_test,y_pred)*100\n",
        "ac"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jn44YowEQ2Pw",
        "outputId": "45cc00e5-8dd2-4e8a-f6e1-58748af21b04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "76.66314677930306"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#using random forest\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "r1=RandomForestClassifier()\n",
        "r1.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "H_4HfXPLQ5AO",
        "outputId": "33e7f411-bfc4-4748-af42-75c3ed0830fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r_pred=r1.predict(x_test)"
      ],
      "metadata": {
        "id": "hU4YpP3HQ8Wr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ac2=accuracy_score(y_test,r_pred)*100\n",
        "ac2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LERXreVoRAl0",
        "outputId": "7b995f0d-9ba1-468d-a031-8145d786cb5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "83.31573389651531"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#using naive_bayes\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "g=GaussianNB()\n",
        "g.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "9wWhyxgfRDRD",
        "outputId": "eaea6c39-0c7a-4261-ea2f-6b463f8808a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GaussianNB()"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g_pred=g.predict(x_test)"
      ],
      "metadata": {
        "id": "Eq5Baa_0RGz4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ac3=accuracy_score(y_test,g_pred)*100\n",
        "ac3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5rHXMJzCRJcA",
        "outputId": "2b1dfb4d-7709-46e3-c75e-5d368b3c5488"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "78.93347412882787"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    }
  ]
}